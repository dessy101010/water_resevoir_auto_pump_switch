//initialize function one, sonicScan function.
int sonicScan(int trig, int echo) {
  
  // initializations.
  pinMode(trig, OUTPUT);
  float duration;
  float distance;

  //sound propagation and detection.
  delay(11);
  digitalWrite(trig, LOW);
  delayMicroseconds(5);
  digitalWrite(trig, HIGH);
  delayMicroseconds(5);
  digitalWrite(trig, LOW);

  //processing.
  duration = pulseIn(echo, HIGH);
  //Serial.println(duration);
  duration -= 5; // subtract irrelevant pulse time.
  distance = (((340 * duration) * 100) / 2) / 1000000; // get distance,  convert to cm, divide by 2 to get actual distance, divide by one million to convert microsec to sec.
  return round(distance - 1);
  }



//Initialize function two, average of three sonicScan, avgScan function.
int avgScan() {

  int trig_ = 2;
  int echo_ = 3;
  int distance1;
  int distance2;
  int distance3;
  
  // taking three distance reading, choosing by frequency.
  distance1 = sonicScan(trig_, echo_);
  delay(5);
  distance2 = sonicScan(trig_, echo_);
  delay(5);
  distance3 = sonicScan(trig_, echo_);
  return (distance1 + distance2 + distance3)/3;
  }








//main code.

//int blue = 7;
//int red = 8;
//int green = 10;



int distance_;
String empty;
String mid;
String full;
String sleep;



void setup() {
  Serial.begin(9600);
  
}




void loop() {
  
  
  distance_ = avgScan();

  //wont pump water till the low mark.
  if (distance_ > empty) {
    //code to send 'empty' to rx unit will go here soon.
    distance_ = avgScan();
    
    if (distance_ > mid) {
      //code to switch send 'mid' to rx unit will go here soon.
      distance_ = avgScan();
      
      if (distance_ > full){
        //code to send 'full' to rx unit will go here soon.
      }
    }
  }


  // Send sleep instruct to rx, and go to watchdog routine. 
}
